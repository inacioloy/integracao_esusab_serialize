#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class HeaderCdsCadastroThrift(object):
    """
    Attributes:
     - cnesUnidadeSaude
     - cnsProfissional
     - codigoIbgeMunicipio
     - dataAtendimento
     - ineEquipe
     - microarea

    """


    def __init__(self, cnesUnidadeSaude=None, cnsProfissional=None, codigoIbgeMunicipio=None, dataAtendimento=None, ineEquipe=None, microarea=None,):
        self.cnesUnidadeSaude = cnesUnidadeSaude
        self.cnsProfissional = cnsProfissional
        self.codigoIbgeMunicipio = codigoIbgeMunicipio
        self.dataAtendimento = dataAtendimento
        self.ineEquipe = ineEquipe
        self.microarea = microarea

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cnesUnidadeSaude = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cnsProfissional = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.codigoIbgeMunicipio = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.dataAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.ineEquipe = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.microarea = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('HeaderCdsCadastroThrift')
        if self.cnesUnidadeSaude is not None:
            oprot.writeFieldBegin('cnesUnidadeSaude', TType.STRING, 1)
            oprot.writeString(self.cnesUnidadeSaude.encode('utf-8') if sys.version_info[0] == 2 else self.cnesUnidadeSaude)
            oprot.writeFieldEnd()
        if self.cnsProfissional is not None:
            oprot.writeFieldBegin('cnsProfissional', TType.STRING, 2)
            oprot.writeString(self.cnsProfissional.encode('utf-8') if sys.version_info[0] == 2 else self.cnsProfissional)
            oprot.writeFieldEnd()
        if self.codigoIbgeMunicipio is not None:
            oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 3)
            oprot.writeString(self.codigoIbgeMunicipio.encode('utf-8') if sys.version_info[0] == 2 else self.codigoIbgeMunicipio)
            oprot.writeFieldEnd()
        if self.dataAtendimento is not None:
            oprot.writeFieldBegin('dataAtendimento', TType.I64, 4)
            oprot.writeI64(self.dataAtendimento)
            oprot.writeFieldEnd()
        if self.ineEquipe is not None:
            oprot.writeFieldBegin('ineEquipe', TType.STRING, 5)
            oprot.writeString(self.ineEquipe.encode('utf-8') if sys.version_info[0] == 2 else self.ineEquipe)
            oprot.writeFieldEnd()
        if self.microarea is not None:
            oprot.writeFieldBegin('microarea', TType.I64, 6)
            oprot.writeI64(self.microarea)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LotacaoHeaderThrift(object):
    """
    Attributes:
     - profissionalCNS
     - cboCodigo_2002
     - cnes
     - ine

    """


    def __init__(self, profissionalCNS=None, cboCodigo_2002=None, cnes=None, ine=None,):
        self.profissionalCNS = profissionalCNS
        self.cboCodigo_2002 = cboCodigo_2002
        self.cnes = cnes
        self.ine = ine

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.profissionalCNS = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cboCodigo_2002 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cnes = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ine = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LotacaoHeaderThrift')
        if self.profissionalCNS is not None:
            oprot.writeFieldBegin('profissionalCNS', TType.STRING, 1)
            oprot.writeString(self.profissionalCNS.encode('utf-8') if sys.version_info[0] == 2 else self.profissionalCNS)
            oprot.writeFieldEnd()
        if self.cboCodigo_2002 is not None:
            oprot.writeFieldBegin('cboCodigo_2002', TType.STRING, 2)
            oprot.writeString(self.cboCodigo_2002.encode('utf-8') if sys.version_info[0] == 2 else self.cboCodigo_2002)
            oprot.writeFieldEnd()
        if self.cnes is not None:
            oprot.writeFieldBegin('cnes', TType.STRING, 3)
            oprot.writeString(self.cnes.encode('utf-8') if sys.version_info[0] == 2 else self.cnes)
            oprot.writeFieldEnd()
        if self.ine is not None:
            oprot.writeFieldBegin('ine', TType.STRING, 4)
            oprot.writeString(self.ine.encode('utf-8') if sys.version_info[0] == 2 else self.ine)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UnicaLotacaoHeaderThrift(object):
    """
    Attributes:
     - profissionalCNS
     - cboCodigo_2002
     - cnes
     - ine
     - dataAtendimento
     - codigoIbgeMunicipio

    """


    def __init__(self, profissionalCNS=None, cboCodigo_2002=None, cnes=None, ine=None, dataAtendimento=None, codigoIbgeMunicipio=None,):
        self.profissionalCNS = profissionalCNS
        self.cboCodigo_2002 = cboCodigo_2002
        self.cnes = cnes
        self.ine = ine
        self.dataAtendimento = dataAtendimento
        self.codigoIbgeMunicipio = codigoIbgeMunicipio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.profissionalCNS = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cboCodigo_2002 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cnes = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.ine = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.dataAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.codigoIbgeMunicipio = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UnicaLotacaoHeaderThrift')
        if self.profissionalCNS is not None:
            oprot.writeFieldBegin('profissionalCNS', TType.STRING, 1)
            oprot.writeString(self.profissionalCNS.encode('utf-8') if sys.version_info[0] == 2 else self.profissionalCNS)
            oprot.writeFieldEnd()
        if self.cboCodigo_2002 is not None:
            oprot.writeFieldBegin('cboCodigo_2002', TType.STRING, 2)
            oprot.writeString(self.cboCodigo_2002.encode('utf-8') if sys.version_info[0] == 2 else self.cboCodigo_2002)
            oprot.writeFieldEnd()
        if self.cnes is not None:
            oprot.writeFieldBegin('cnes', TType.STRING, 3)
            oprot.writeString(self.cnes.encode('utf-8') if sys.version_info[0] == 2 else self.cnes)
            oprot.writeFieldEnd()
        if self.ine is not None:
            oprot.writeFieldBegin('ine', TType.STRING, 4)
            oprot.writeString(self.ine.encode('utf-8') if sys.version_info[0] == 2 else self.ine)
            oprot.writeFieldEnd()
        if self.dataAtendimento is not None:
            oprot.writeFieldBegin('dataAtendimento', TType.I64, 5)
            oprot.writeI64(self.dataAtendimento)
            oprot.writeFieldEnd()
        if self.codigoIbgeMunicipio is not None:
            oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 6)
            oprot.writeString(self.codigoIbgeMunicipio.encode('utf-8') if sys.version_info[0] == 2 else self.codigoIbgeMunicipio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class VariasLotacoesHeaderThrift(object):
    """
    Attributes:
     - lotacaoFormPrincipal
     - lotacaoFormAtendimentoCompartilhado
     - dataAtendimento
     - codigoIbgeMunicipio

    """


    def __init__(self, lotacaoFormPrincipal=None, lotacaoFormAtendimentoCompartilhado=None, dataAtendimento=None, codigoIbgeMunicipio=None,):
        self.lotacaoFormPrincipal = lotacaoFormPrincipal
        self.lotacaoFormAtendimentoCompartilhado = lotacaoFormAtendimentoCompartilhado
        self.dataAtendimento = dataAtendimento
        self.codigoIbgeMunicipio = codigoIbgeMunicipio

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 6:
                if ftype == TType.STRUCT:
                    self.lotacaoFormPrincipal = LotacaoHeaderThrift()
                    self.lotacaoFormPrincipal.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRUCT:
                    self.lotacaoFormAtendimentoCompartilhado = LotacaoHeaderThrift()
                    self.lotacaoFormAtendimentoCompartilhado.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.dataAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.codigoIbgeMunicipio = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VariasLotacoesHeaderThrift')
        if self.lotacaoFormPrincipal is not None:
            oprot.writeFieldBegin('lotacaoFormPrincipal', TType.STRUCT, 6)
            self.lotacaoFormPrincipal.write(oprot)
            oprot.writeFieldEnd()
        if self.lotacaoFormAtendimentoCompartilhado is not None:
            oprot.writeFieldBegin('lotacaoFormAtendimentoCompartilhado', TType.STRUCT, 7)
            self.lotacaoFormAtendimentoCompartilhado.write(oprot)
            oprot.writeFieldEnd()
        if self.dataAtendimento is not None:
            oprot.writeFieldBegin('dataAtendimento', TType.I64, 8)
            oprot.writeI64(self.dataAtendimento)
            oprot.writeFieldEnd()
        if self.codigoIbgeMunicipio is not None:
            oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 9)
            oprot.writeString(self.codigoIbgeMunicipio.encode('utf-8') if sys.version_info[0] == 2 else self.codigoIbgeMunicipio)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EnderecoLocalPermanenciaThrift(object):
    """
    Attributes:
     - bairro
     - cep
     - codigoIbgeMunicipio
     - complemento
     - nomeLogradouro
     - numero
     - numeroDneUf
     - telefoneContato
     - telefoneResidencia
     - tipoLogradouroNumeroDne
     - stSemNumero
     - pontoReferencia
     - microArea
     - stForaArea

    """


    def __init__(self, bairro=None, cep=None, codigoIbgeMunicipio=None, complemento=None, nomeLogradouro=None, numero=None, numeroDneUf=None, telefoneContato=None, telefoneResidencia=None, tipoLogradouroNumeroDne=None, stSemNumero=None, pontoReferencia=None, microArea=None, stForaArea=None,):
        self.bairro = bairro
        self.cep = cep
        self.codigoIbgeMunicipio = codigoIbgeMunicipio
        self.complemento = complemento
        self.nomeLogradouro = nomeLogradouro
        self.numero = numero
        self.numeroDneUf = numeroDneUf
        self.telefoneContato = telefoneContato
        self.telefoneResidencia = telefoneResidencia
        self.tipoLogradouroNumeroDne = tipoLogradouroNumeroDne
        self.stSemNumero = stSemNumero
        self.pontoReferencia = pontoReferencia
        self.microArea = microArea
        self.stForaArea = stForaArea

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.bairro = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.cep = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.codigoIbgeMunicipio = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.complemento = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.nomeLogradouro = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.numero = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.numeroDneUf = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.telefoneContato = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.telefoneResidencia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.tipoLogradouroNumeroDne = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BOOL:
                    self.stSemNumero = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.pontoReferencia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.microArea = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.BOOL:
                    self.stForaArea = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EnderecoLocalPermanenciaThrift')
        if self.bairro is not None:
            oprot.writeFieldBegin('bairro', TType.STRING, 1)
            oprot.writeString(self.bairro.encode('utf-8') if sys.version_info[0] == 2 else self.bairro)
            oprot.writeFieldEnd()
        if self.cep is not None:
            oprot.writeFieldBegin('cep', TType.STRING, 2)
            oprot.writeString(self.cep.encode('utf-8') if sys.version_info[0] == 2 else self.cep)
            oprot.writeFieldEnd()
        if self.codigoIbgeMunicipio is not None:
            oprot.writeFieldBegin('codigoIbgeMunicipio', TType.STRING, 3)
            oprot.writeString(self.codigoIbgeMunicipio.encode('utf-8') if sys.version_info[0] == 2 else self.codigoIbgeMunicipio)
            oprot.writeFieldEnd()
        if self.complemento is not None:
            oprot.writeFieldBegin('complemento', TType.STRING, 4)
            oprot.writeString(self.complemento.encode('utf-8') if sys.version_info[0] == 2 else self.complemento)
            oprot.writeFieldEnd()
        if self.nomeLogradouro is not None:
            oprot.writeFieldBegin('nomeLogradouro', TType.STRING, 5)
            oprot.writeString(self.nomeLogradouro.encode('utf-8') if sys.version_info[0] == 2 else self.nomeLogradouro)
            oprot.writeFieldEnd()
        if self.numero is not None:
            oprot.writeFieldBegin('numero', TType.STRING, 6)
            oprot.writeString(self.numero.encode('utf-8') if sys.version_info[0] == 2 else self.numero)
            oprot.writeFieldEnd()
        if self.numeroDneUf is not None:
            oprot.writeFieldBegin('numeroDneUf', TType.STRING, 7)
            oprot.writeString(self.numeroDneUf.encode('utf-8') if sys.version_info[0] == 2 else self.numeroDneUf)
            oprot.writeFieldEnd()
        if self.telefoneContato is not None:
            oprot.writeFieldBegin('telefoneContato', TType.STRING, 8)
            oprot.writeString(self.telefoneContato.encode('utf-8') if sys.version_info[0] == 2 else self.telefoneContato)
            oprot.writeFieldEnd()
        if self.telefoneResidencia is not None:
            oprot.writeFieldBegin('telefoneResidencia', TType.STRING, 9)
            oprot.writeString(self.telefoneResidencia.encode('utf-8') if sys.version_info[0] == 2 else self.telefoneResidencia)
            oprot.writeFieldEnd()
        if self.tipoLogradouroNumeroDne is not None:
            oprot.writeFieldBegin('tipoLogradouroNumeroDne', TType.STRING, 10)
            oprot.writeString(self.tipoLogradouroNumeroDne.encode('utf-8') if sys.version_info[0] == 2 else self.tipoLogradouroNumeroDne)
            oprot.writeFieldEnd()
        if self.stSemNumero is not None:
            oprot.writeFieldBegin('stSemNumero', TType.BOOL, 11)
            oprot.writeBool(self.stSemNumero)
            oprot.writeFieldEnd()
        if self.pontoReferencia is not None:
            oprot.writeFieldBegin('pontoReferencia', TType.STRING, 12)
            oprot.writeString(self.pontoReferencia.encode('utf-8') if sys.version_info[0] == 2 else self.pontoReferencia)
            oprot.writeFieldEnd()
        if self.microArea is not None:
            oprot.writeFieldBegin('microArea', TType.STRING, 13)
            oprot.writeString(self.microArea.encode('utf-8') if sys.version_info[0] == 2 else self.microArea)
            oprot.writeFieldEnd()
        if self.stForaArea is not None:
            oprot.writeFieldBegin('stForaArea', TType.BOOL, 14)
            oprot.writeBool(self.stForaArea)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MedicamentoThrift(object):
    """
    Attributes:
     - codigoCatmat
     - viaAdministracao
     - dose
     - doseUnica
     - usoContinuo
     - doseFrequenciaTipo
     - doseFrequencia
     - doseFrequenciaQuantidade
     - doseFrequenciaUnidadeMedida
     - dtInicioTratamento
     - duracaoTratamento
     - duracaoTratamentoMedida
     - quantidadeReceitada

    """


    def __init__(self, codigoCatmat=None, viaAdministracao=None, dose=None, doseUnica=None, usoContinuo=None, doseFrequenciaTipo=None, doseFrequencia=None, doseFrequenciaQuantidade=None, doseFrequenciaUnidadeMedida=None, dtInicioTratamento=None, duracaoTratamento=None, duracaoTratamentoMedida=None, quantidadeReceitada=None,):
        self.codigoCatmat = codigoCatmat
        self.viaAdministracao = viaAdministracao
        self.dose = dose
        self.doseUnica = doseUnica
        self.usoContinuo = usoContinuo
        self.doseFrequenciaTipo = doseFrequenciaTipo
        self.doseFrequencia = doseFrequencia
        self.doseFrequenciaQuantidade = doseFrequenciaQuantidade
        self.doseFrequenciaUnidadeMedida = doseFrequenciaUnidadeMedida
        self.dtInicioTratamento = dtInicioTratamento
        self.duracaoTratamento = duracaoTratamento
        self.duracaoTratamentoMedida = duracaoTratamentoMedida
        self.quantidadeReceitada = quantidadeReceitada

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.codigoCatmat = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.viaAdministracao = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dose = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.doseUnica = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.usoContinuo = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.doseFrequenciaTipo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.doseFrequencia = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.doseFrequenciaQuantidade = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.doseFrequenciaUnidadeMedida = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.dtInicioTratamento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.I32:
                    self.duracaoTratamento = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.duracaoTratamentoMedida = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I32:
                    self.quantidadeReceitada = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('MedicamentoThrift')
        if self.codigoCatmat is not None:
            oprot.writeFieldBegin('codigoCatmat', TType.STRING, 1)
            oprot.writeString(self.codigoCatmat.encode('utf-8') if sys.version_info[0] == 2 else self.codigoCatmat)
            oprot.writeFieldEnd()
        if self.viaAdministracao is not None:
            oprot.writeFieldBegin('viaAdministracao', TType.I64, 2)
            oprot.writeI64(self.viaAdministracao)
            oprot.writeFieldEnd()
        if self.dose is not None:
            oprot.writeFieldBegin('dose', TType.STRING, 3)
            oprot.writeString(self.dose.encode('utf-8') if sys.version_info[0] == 2 else self.dose)
            oprot.writeFieldEnd()
        if self.doseUnica is not None:
            oprot.writeFieldBegin('doseUnica', TType.BOOL, 4)
            oprot.writeBool(self.doseUnica)
            oprot.writeFieldEnd()
        if self.usoContinuo is not None:
            oprot.writeFieldBegin('usoContinuo', TType.BOOL, 5)
            oprot.writeBool(self.usoContinuo)
            oprot.writeFieldEnd()
        if self.doseFrequenciaTipo is not None:
            oprot.writeFieldBegin('doseFrequenciaTipo', TType.I64, 6)
            oprot.writeI64(self.doseFrequenciaTipo)
            oprot.writeFieldEnd()
        if self.doseFrequencia is not None:
            oprot.writeFieldBegin('doseFrequencia', TType.STRING, 7)
            oprot.writeString(self.doseFrequencia.encode('utf-8') if sys.version_info[0] == 2 else self.doseFrequencia)
            oprot.writeFieldEnd()
        if self.doseFrequenciaQuantidade is not None:
            oprot.writeFieldBegin('doseFrequenciaQuantidade', TType.I32, 8)
            oprot.writeI32(self.doseFrequenciaQuantidade)
            oprot.writeFieldEnd()
        if self.doseFrequenciaUnidadeMedida is not None:
            oprot.writeFieldBegin('doseFrequenciaUnidadeMedida', TType.I64, 9)
            oprot.writeI64(self.doseFrequenciaUnidadeMedida)
            oprot.writeFieldEnd()
        if self.dtInicioTratamento is not None:
            oprot.writeFieldBegin('dtInicioTratamento', TType.I64, 10)
            oprot.writeI64(self.dtInicioTratamento)
            oprot.writeFieldEnd()
        if self.duracaoTratamento is not None:
            oprot.writeFieldBegin('duracaoTratamento', TType.I32, 11)
            oprot.writeI32(self.duracaoTratamento)
            oprot.writeFieldEnd()
        if self.duracaoTratamentoMedida is not None:
            oprot.writeFieldBegin('duracaoTratamentoMedida', TType.I64, 12)
            oprot.writeI64(self.duracaoTratamentoMedida)
            oprot.writeFieldEnd()
        if self.quantidadeReceitada is not None:
            oprot.writeFieldBegin('quantidadeReceitada', TType.I32, 13)
            oprot.writeI32(self.quantidadeReceitada)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class EncaminhamentoExternoThrift(object):
    """
    Attributes:
     - especialidade
     - hipoteseDiagnosticoCid10
     - hipoteseDiagnosticoCiap2
     - classificacaoRisco

    """


    def __init__(self, especialidade=None, hipoteseDiagnosticoCid10=None, hipoteseDiagnosticoCiap2=None, classificacaoRisco=None,):
        self.especialidade = especialidade
        self.hipoteseDiagnosticoCid10 = hipoteseDiagnosticoCid10
        self.hipoteseDiagnosticoCiap2 = hipoteseDiagnosticoCiap2
        self.classificacaoRisco = classificacaoRisco

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.especialidade = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.hipoteseDiagnosticoCid10 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.hipoteseDiagnosticoCiap2 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.classificacaoRisco = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('EncaminhamentoExternoThrift')
        if self.especialidade is not None:
            oprot.writeFieldBegin('especialidade', TType.I64, 1)
            oprot.writeI64(self.especialidade)
            oprot.writeFieldEnd()
        if self.hipoteseDiagnosticoCid10 is not None:
            oprot.writeFieldBegin('hipoteseDiagnosticoCid10', TType.STRING, 2)
            oprot.writeString(self.hipoteseDiagnosticoCid10.encode('utf-8') if sys.version_info[0] == 2 else self.hipoteseDiagnosticoCid10)
            oprot.writeFieldEnd()
        if self.hipoteseDiagnosticoCiap2 is not None:
            oprot.writeFieldBegin('hipoteseDiagnosticoCiap2', TType.STRING, 3)
            oprot.writeString(self.hipoteseDiagnosticoCiap2.encode('utf-8') if sys.version_info[0] == 2 else self.hipoteseDiagnosticoCiap2)
            oprot.writeFieldEnd()
        if self.classificacaoRisco is not None:
            oprot.writeFieldBegin('classificacaoRisco', TType.I64, 4)
            oprot.writeI64(self.classificacaoRisco)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResultadoExameThrift(object):
    """
    Attributes:
     - tipoResultado
     - valorResultado

    """


    def __init__(self, tipoResultado=None, valorResultado=None,):
        self.tipoResultado = tipoResultado
        self.valorResultado = valorResultado

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.tipoResultado = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.valorResultado = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ResultadoExameThrift')
        if self.tipoResultado is not None:
            oprot.writeFieldBegin('tipoResultado', TType.I32, 1)
            oprot.writeI32(self.tipoResultado)
            oprot.writeFieldEnd()
        if self.valorResultado is not None:
            oprot.writeFieldBegin('valorResultado', TType.STRING, 2)
            oprot.writeString(self.valorResultado.encode('utf-8') if sys.version_info[0] == 2 else self.valorResultado)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResultadosExameThrift(object):
    """
    Attributes:
     - exame
     - dataSolicitacao
     - dataRealizacao
     - dataResultado
     - resultadoExame

    """


    def __init__(self, exame=None, dataSolicitacao=None, dataRealizacao=None, dataResultado=None, resultadoExame=None,):
        self.exame = exame
        self.dataSolicitacao = dataSolicitacao
        self.dataRealizacao = dataRealizacao
        self.dataResultado = dataResultado
        self.resultadoExame = resultadoExame

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.exame = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.dataSolicitacao = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.dataRealizacao = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.dataResultado = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.resultadoExame = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = ResultadoExameThrift()
                        _elem5.read(iprot)
                        self.resultadoExame.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ResultadosExameThrift')
        if self.exame is not None:
            oprot.writeFieldBegin('exame', TType.STRING, 1)
            oprot.writeString(self.exame.encode('utf-8') if sys.version_info[0] == 2 else self.exame)
            oprot.writeFieldEnd()
        if self.dataSolicitacao is not None:
            oprot.writeFieldBegin('dataSolicitacao', TType.I64, 2)
            oprot.writeI64(self.dataSolicitacao)
            oprot.writeFieldEnd()
        if self.dataRealizacao is not None:
            oprot.writeFieldBegin('dataRealizacao', TType.I64, 3)
            oprot.writeI64(self.dataRealizacao)
            oprot.writeFieldEnd()
        if self.dataResultado is not None:
            oprot.writeFieldBegin('dataResultado', TType.I64, 4)
            oprot.writeI64(self.dataResultado)
            oprot.writeFieldEnd()
        if self.resultadoExame is not None:
            oprot.writeFieldBegin('resultadoExame', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.resultadoExame))
            for iter6 in self.resultadoExame:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(HeaderCdsCadastroThrift)
HeaderCdsCadastroThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cnesUnidadeSaude', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cnsProfissional', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'codigoIbgeMunicipio', 'UTF8', None, ),  # 3
    (4, TType.I64, 'dataAtendimento', None, None, ),  # 4
    (5, TType.STRING, 'ineEquipe', 'UTF8', None, ),  # 5
    (6, TType.I64, 'microarea', None, None, ),  # 6
)
all_structs.append(LotacaoHeaderThrift)
LotacaoHeaderThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'profissionalCNS', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cboCodigo_2002', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cnes', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ine', 'UTF8', None, ),  # 4
)
all_structs.append(UnicaLotacaoHeaderThrift)
UnicaLotacaoHeaderThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'profissionalCNS', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cboCodigo_2002', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cnes', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'ine', 'UTF8', None, ),  # 4
    (5, TType.I64, 'dataAtendimento', None, None, ),  # 5
    (6, TType.STRING, 'codigoIbgeMunicipio', 'UTF8', None, ),  # 6
)
all_structs.append(VariasLotacoesHeaderThrift)
VariasLotacoesHeaderThrift.thrift_spec = (
    None,  # 0
    None,  # 1
    None,  # 2
    None,  # 3
    None,  # 4
    None,  # 5
    (6, TType.STRUCT, 'lotacaoFormPrincipal', [LotacaoHeaderThrift, None], None, ),  # 6
    (7, TType.STRUCT, 'lotacaoFormAtendimentoCompartilhado', [LotacaoHeaderThrift, None], None, ),  # 7
    (8, TType.I64, 'dataAtendimento', None, None, ),  # 8
    (9, TType.STRING, 'codigoIbgeMunicipio', 'UTF8', None, ),  # 9
)
all_structs.append(EnderecoLocalPermanenciaThrift)
EnderecoLocalPermanenciaThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'bairro', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'cep', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'codigoIbgeMunicipio', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'complemento', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'nomeLogradouro', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'numero', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'numeroDneUf', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'telefoneContato', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'telefoneResidencia', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'tipoLogradouroNumeroDne', 'UTF8', None, ),  # 10
    (11, TType.BOOL, 'stSemNumero', None, None, ),  # 11
    (12, TType.STRING, 'pontoReferencia', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'microArea', 'UTF8', None, ),  # 13
    (14, TType.BOOL, 'stForaArea', None, None, ),  # 14
)
all_structs.append(MedicamentoThrift)
MedicamentoThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'codigoCatmat', 'UTF8', None, ),  # 1
    (2, TType.I64, 'viaAdministracao', None, None, ),  # 2
    (3, TType.STRING, 'dose', 'UTF8', None, ),  # 3
    (4, TType.BOOL, 'doseUnica', None, None, ),  # 4
    (5, TType.BOOL, 'usoContinuo', None, None, ),  # 5
    (6, TType.I64, 'doseFrequenciaTipo', None, None, ),  # 6
    (7, TType.STRING, 'doseFrequencia', 'UTF8', None, ),  # 7
    (8, TType.I32, 'doseFrequenciaQuantidade', None, None, ),  # 8
    (9, TType.I64, 'doseFrequenciaUnidadeMedida', None, None, ),  # 9
    (10, TType.I64, 'dtInicioTratamento', None, None, ),  # 10
    (11, TType.I32, 'duracaoTratamento', None, None, ),  # 11
    (12, TType.I64, 'duracaoTratamentoMedida', None, None, ),  # 12
    (13, TType.I32, 'quantidadeReceitada', None, None, ),  # 13
)
all_structs.append(EncaminhamentoExternoThrift)
EncaminhamentoExternoThrift.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'especialidade', None, None, ),  # 1
    (2, TType.STRING, 'hipoteseDiagnosticoCid10', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'hipoteseDiagnosticoCiap2', 'UTF8', None, ),  # 3
    (4, TType.I64, 'classificacaoRisco', None, None, ),  # 4
)
all_structs.append(ResultadoExameThrift)
ResultadoExameThrift.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'tipoResultado', None, None, ),  # 1
    (2, TType.STRING, 'valorResultado', 'UTF8', None, ),  # 2
)
all_structs.append(ResultadosExameThrift)
ResultadosExameThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'exame', 'UTF8', None, ),  # 1
    (2, TType.I64, 'dataSolicitacao', None, None, ),  # 2
    (3, TType.I64, 'dataRealizacao', None, None, ),  # 3
    (4, TType.I64, 'dataResultado', None, None, ),  # 4
    None,  # 5
    (6, TType.LIST, 'resultadoExame', (TType.STRUCT, [ResultadoExameThrift, None], False), None, ),  # 6
)
fix_spec(all_structs)
del all_structs
