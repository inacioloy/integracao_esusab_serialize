#
# Autogenerated by Thrift Compiler (0.16.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import br.gov.saude.esusab.ras.common.ttypes

from thrift.transport import TTransport
all_structs = []


class VacinaRowThrift(object):
    """
    Attributes:
     - imunobiologico
     - estrategiaVacinacao
     - dose
     - lote
     - fabricante
     - grupoAtendimento
     - stRegistroAnterior
     - dataRegistroAnterior
     - stAplicadoExterior

    """


    def __init__(self, imunobiologico=None, estrategiaVacinacao=None, dose=None, lote=None, fabricante=None, grupoAtendimento=None, stRegistroAnterior=None, dataRegistroAnterior=None, stAplicadoExterior=None,):
        self.imunobiologico = imunobiologico
        self.estrategiaVacinacao = estrategiaVacinacao
        self.dose = dose
        self.lote = lote
        self.fabricante = fabricante
        self.grupoAtendimento = grupoAtendimento
        self.stRegistroAnterior = stRegistroAnterior
        self.dataRegistroAnterior = dataRegistroAnterior
        self.stAplicadoExterior = stAplicadoExterior

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.imunobiologico = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.estrategiaVacinacao = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.dose = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.lote = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.fabricante = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.grupoAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.stRegistroAnterior = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.dataRegistroAnterior = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.stAplicadoExterior = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('VacinaRowThrift')
        if self.imunobiologico is not None:
            oprot.writeFieldBegin('imunobiologico', TType.I64, 1)
            oprot.writeI64(self.imunobiologico)
            oprot.writeFieldEnd()
        if self.estrategiaVacinacao is not None:
            oprot.writeFieldBegin('estrategiaVacinacao', TType.I64, 2)
            oprot.writeI64(self.estrategiaVacinacao)
            oprot.writeFieldEnd()
        if self.dose is not None:
            oprot.writeFieldBegin('dose', TType.I64, 3)
            oprot.writeI64(self.dose)
            oprot.writeFieldEnd()
        if self.lote is not None:
            oprot.writeFieldBegin('lote', TType.STRING, 4)
            oprot.writeString(self.lote.encode('utf-8') if sys.version_info[0] == 2 else self.lote)
            oprot.writeFieldEnd()
        if self.fabricante is not None:
            oprot.writeFieldBegin('fabricante', TType.STRING, 5)
            oprot.writeString(self.fabricante.encode('utf-8') if sys.version_info[0] == 2 else self.fabricante)
            oprot.writeFieldEnd()
        if self.grupoAtendimento is not None:
            oprot.writeFieldBegin('grupoAtendimento', TType.I64, 6)
            oprot.writeI64(self.grupoAtendimento)
            oprot.writeFieldEnd()
        if self.stRegistroAnterior is not None:
            oprot.writeFieldBegin('stRegistroAnterior', TType.BOOL, 7)
            oprot.writeBool(self.stRegistroAnterior)
            oprot.writeFieldEnd()
        if self.dataRegistroAnterior is not None:
            oprot.writeFieldBegin('dataRegistroAnterior', TType.I64, 8)
            oprot.writeI64(self.dataRegistroAnterior)
            oprot.writeFieldEnd()
        if self.stAplicadoExterior is not None:
            oprot.writeFieldBegin('stAplicadoExterior', TType.BOOL, 9)
            oprot.writeBool(self.stAplicadoExterior)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FichaVacinacaoChildThrift(object):
    """
    Attributes:
     - turno
     - numProntuario
     - cnsCidadao
     - dtNascimento
     - sexo
     - localAtendimento
     - viajante
     - comunicanteHanseniase
     - gestante
     - puerpera
     - vacinas
     - dataHoraInicialAtendimento
     - dataHoraFinalAtendimento
     - cpfCidadao

    """


    def __init__(self, turno=None, numProntuario=None, cnsCidadao=None, dtNascimento=None, sexo=None, localAtendimento=None, viajante=None, comunicanteHanseniase=None, gestante=None, puerpera=None, vacinas=None, dataHoraInicialAtendimento=None, dataHoraFinalAtendimento=None, cpfCidadao=None,):
        self.turno = turno
        self.numProntuario = numProntuario
        self.cnsCidadao = cnsCidadao
        self.dtNascimento = dtNascimento
        self.sexo = sexo
        self.localAtendimento = localAtendimento
        self.viajante = viajante
        self.comunicanteHanseniase = comunicanteHanseniase
        self.gestante = gestante
        self.puerpera = puerpera
        self.vacinas = vacinas
        self.dataHoraInicialAtendimento = dataHoraInicialAtendimento
        self.dataHoraFinalAtendimento = dataHoraFinalAtendimento
        self.cpfCidadao = cpfCidadao

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.turno = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.numProntuario = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.cnsCidadao = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.dtNascimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.sexo = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.localAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.viajante = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.comunicanteHanseniase = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.gestante = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.BOOL:
                    self.puerpera = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.vacinas = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = VacinaRowThrift()
                        _elem5.read(iprot)
                        self.vacinas.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.I64:
                    self.dataHoraInicialAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.dataHoraFinalAtendimento = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.cpfCidadao = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FichaVacinacaoChildThrift')
        if self.turno is not None:
            oprot.writeFieldBegin('turno', TType.I64, 1)
            oprot.writeI64(self.turno)
            oprot.writeFieldEnd()
        if self.numProntuario is not None:
            oprot.writeFieldBegin('numProntuario', TType.STRING, 2)
            oprot.writeString(self.numProntuario.encode('utf-8') if sys.version_info[0] == 2 else self.numProntuario)
            oprot.writeFieldEnd()
        if self.cnsCidadao is not None:
            oprot.writeFieldBegin('cnsCidadao', TType.STRING, 3)
            oprot.writeString(self.cnsCidadao.encode('utf-8') if sys.version_info[0] == 2 else self.cnsCidadao)
            oprot.writeFieldEnd()
        if self.dtNascimento is not None:
            oprot.writeFieldBegin('dtNascimento', TType.I64, 4)
            oprot.writeI64(self.dtNascimento)
            oprot.writeFieldEnd()
        if self.sexo is not None:
            oprot.writeFieldBegin('sexo', TType.I64, 5)
            oprot.writeI64(self.sexo)
            oprot.writeFieldEnd()
        if self.localAtendimento is not None:
            oprot.writeFieldBegin('localAtendimento', TType.I64, 6)
            oprot.writeI64(self.localAtendimento)
            oprot.writeFieldEnd()
        if self.viajante is not None:
            oprot.writeFieldBegin('viajante', TType.BOOL, 7)
            oprot.writeBool(self.viajante)
            oprot.writeFieldEnd()
        if self.comunicanteHanseniase is not None:
            oprot.writeFieldBegin('comunicanteHanseniase', TType.BOOL, 8)
            oprot.writeBool(self.comunicanteHanseniase)
            oprot.writeFieldEnd()
        if self.gestante is not None:
            oprot.writeFieldBegin('gestante', TType.BOOL, 9)
            oprot.writeBool(self.gestante)
            oprot.writeFieldEnd()
        if self.puerpera is not None:
            oprot.writeFieldBegin('puerpera', TType.BOOL, 10)
            oprot.writeBool(self.puerpera)
            oprot.writeFieldEnd()
        if self.vacinas is not None:
            oprot.writeFieldBegin('vacinas', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.vacinas))
            for iter6 in self.vacinas:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.dataHoraInicialAtendimento is not None:
            oprot.writeFieldBegin('dataHoraInicialAtendimento', TType.I64, 12)
            oprot.writeI64(self.dataHoraInicialAtendimento)
            oprot.writeFieldEnd()
        if self.dataHoraFinalAtendimento is not None:
            oprot.writeFieldBegin('dataHoraFinalAtendimento', TType.I64, 13)
            oprot.writeI64(self.dataHoraFinalAtendimento)
            oprot.writeFieldEnd()
        if self.cpfCidadao is not None:
            oprot.writeFieldBegin('cpfCidadao', TType.STRING, 14)
            oprot.writeString(self.cpfCidadao.encode('utf-8') if sys.version_info[0] == 2 else self.cpfCidadao)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FichaVacinacaoMasterThrift(object):
    """
    Attributes:
     - uuidFicha
     - tpCdsOrigem
     - headerTransport
     - vacinacoes

    """


    def __init__(self, uuidFicha=None, tpCdsOrigem=None, headerTransport=None, vacinacoes=None,):
        self.uuidFicha = uuidFicha
        self.tpCdsOrigem = tpCdsOrigem
        self.headerTransport = headerTransport
        self.vacinacoes = vacinacoes

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.uuidFicha = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.tpCdsOrigem = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.headerTransport = br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift()
                    self.headerTransport.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.vacinacoes = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = FichaVacinacaoChildThrift()
                        _elem12.read(iprot)
                        self.vacinacoes.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FichaVacinacaoMasterThrift')
        if self.uuidFicha is not None:
            oprot.writeFieldBegin('uuidFicha', TType.STRING, 1)
            oprot.writeString(self.uuidFicha.encode('utf-8') if sys.version_info[0] == 2 else self.uuidFicha)
            oprot.writeFieldEnd()
        if self.tpCdsOrigem is not None:
            oprot.writeFieldBegin('tpCdsOrigem', TType.I32, 2)
            oprot.writeI32(self.tpCdsOrigem)
            oprot.writeFieldEnd()
        if self.headerTransport is not None:
            oprot.writeFieldBegin('headerTransport', TType.STRUCT, 3)
            self.headerTransport.write(oprot)
            oprot.writeFieldEnd()
        if self.vacinacoes is not None:
            oprot.writeFieldBegin('vacinacoes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.vacinacoes))
            for iter13 in self.vacinacoes:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.uuidFicha is None:
            raise TProtocolException(message='Required field uuidFicha is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(VacinaRowThrift)
VacinaRowThrift.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'imunobiologico', None, None, ),  # 1
    (2, TType.I64, 'estrategiaVacinacao', None, None, ),  # 2
    (3, TType.I64, 'dose', None, None, ),  # 3
    (4, TType.STRING, 'lote', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'fabricante', 'UTF8', None, ),  # 5
    (6, TType.I64, 'grupoAtendimento', None, None, ),  # 6
    (7, TType.BOOL, 'stRegistroAnterior', None, None, ),  # 7
    (8, TType.I64, 'dataRegistroAnterior', None, None, ),  # 8
    (9, TType.BOOL, 'stAplicadoExterior', None, None, ),  # 9
)
all_structs.append(FichaVacinacaoChildThrift)
FichaVacinacaoChildThrift.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'turno', None, None, ),  # 1
    (2, TType.STRING, 'numProntuario', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'cnsCidadao', 'UTF8', None, ),  # 3
    (4, TType.I64, 'dtNascimento', None, None, ),  # 4
    (5, TType.I64, 'sexo', None, None, ),  # 5
    (6, TType.I64, 'localAtendimento', None, None, ),  # 6
    (7, TType.BOOL, 'viajante', None, None, ),  # 7
    (8, TType.BOOL, 'comunicanteHanseniase', None, None, ),  # 8
    (9, TType.BOOL, 'gestante', None, None, ),  # 9
    (10, TType.BOOL, 'puerpera', None, None, ),  # 10
    (11, TType.LIST, 'vacinas', (TType.STRUCT, [VacinaRowThrift, None], False), None, ),  # 11
    (12, TType.I64, 'dataHoraInicialAtendimento', None, None, ),  # 12
    (13, TType.I64, 'dataHoraFinalAtendimento', None, None, ),  # 13
    (14, TType.STRING, 'cpfCidadao', 'UTF8', None, ),  # 14
)
all_structs.append(FichaVacinacaoMasterThrift)
FichaVacinacaoMasterThrift.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'uuidFicha', 'UTF8', None, ),  # 1
    (2, TType.I32, 'tpCdsOrigem', None, None, ),  # 2
    (3, TType.STRUCT, 'headerTransport', [br.gov.saude.esusab.ras.common.ttypes.UnicaLotacaoHeaderThrift, None], None, ),  # 3
    (4, TType.LIST, 'vacinacoes', (TType.STRUCT, [FichaVacinacaoChildThrift, None], False), None, ),  # 4
)
fix_spec(all_structs)
del all_structs
